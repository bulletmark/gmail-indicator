#!/usr/bin/env python
'''
Enable or disable a GNOME shell extension. Default action is to print the
current state.
'''
# (C) Mark Blakeney, markb@berlios.de, May 2012.

import sys, argparse, subprocess, ast

SCHEMA = 'org.gnome.shell'
KEY = 'enabled-extensions'

class GIO(object):
    'Use formal Gio interface. But is buggy on Ubuntu (@12.04)'
    from gi.repository import Gio
    def __init__(self):
        self.handle = self.Gio.Settings.new(SCHEMA)

    def getval(self):
        return self.handle.get_strv(KEY)

    def setval(self, value):
        return self.handle.set_strv(KEY, value)

class OWN(object):
    'Use command line gsettings which always works.'
    def getval(self):
        return [x.strip() for x in ast.literal_eval(subprocess.check_output(
            ('gsettings', 'get', SCHEMA, KEY)))]

    def setval(self, value):
        return subprocess.check_output(('gsettings', 'set', SCHEMA, KEY,
            str(value)))

# Process command line options
opt = argparse.ArgumentParser(description=__doc__.strip())
opt.add_argument('-e', '--enable', action='store_true',
        help='enable named extension')
opt.add_argument('-d', '--disable', action='store_true',
        help='disable named extension')
opt.add_argument('-g', '--gio', action='store_true',
        help='use Gio interface rather than own implementation')
opt.add_argument('uuid', help='UUID of GNOME shell extension')
args = opt.parse_args()

conf = GIO() if args.gio else OWN()
extlist = conf.getval()
enabled = args.uuid in extlist

if args.enable:
    if enabled:
        sys.stderr.write('"%s" is already enabled.\n' % args.uuid)
        sys.exit(1)

    extlist.append(args.uuid)
    conf.setval(extlist)
    print '"%s" is now enabled.' % args.uuid
elif args.disable:

    if not enabled:
        sys.stderr.write('"%s" is already disabled.\n' % args.uuid)
        sys.exit(1)

    extlist.remove(args.uuid)
    conf.setval(extlist)
    print '"%s" is now disabled.' % args.uuid
else:
    print '"%s" is %s.' % (args.uuid, "enabled" if enabled else 'disabled')

sys.exit(0)
